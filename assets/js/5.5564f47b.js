(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{166:function(e,n,a){"use strict";a.r(n);var t=a(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"基于-vue-配置多页面应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-vue-配置多页面应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 基于 vue 配置多页面应用")]),e._v(" "),a("p",[a("strong",[e._v("前言:")]),e._v(" 本文基于"),a("code",[e._v("vue 2.5.2")]),e._v(", "),a("code",[e._v("webpack 3.6.0")]),e._v("（配置多页面原理类似，实现方法各有千秋，可根据需要进行定制化）")]),e._v(" "),a("p",[a("code",[e._v("vue")]),e._v(" 是单页面应用。但是在做大型项目时，单页面往往无法满足我们的需求，因此需要配置多页面应用。")]),e._v(" "),a("h3",{attrs:{id:"_1-新建-vue-项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-新建-vue-项目","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 新建 vue 项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vue init webpack vue_multiple_test\ncd vue_multiple_test\nnpm install\n")])])]),a("h3",{attrs:{id:"_2-安装-glob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装-glob","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 安装 glob")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm i glob --save-dev\n")])])]),a("p",[a("code",[e._v("glob")]),e._v(" 模块用于查找符合要求的文件")]),e._v(" "),a("h3",{attrs:{id:"_3-目标结构目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-目标结构目录","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. 目标结构目录")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".\n├── README.md\n├── build\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── generatePage.sh\n├── index.html\n├── package-lock.json\n├── package.json\n├── src\n│   ├── assets\n│   │   └── logo.png\n│   └── pages\n│       ├── page1\n│       │   ├── App.vue\n│       │   ├── index.html\n│       │   └── index.js\n│       └── page2\n│           ├── App.vue\n│           ├── index.html\n│           └── index.js\n└── static\n\n")])])]),a("p",[e._v("其中，"),a("code",[e._v("pages")]),e._v("文件夹用于放置页面。 "),a("code",[e._v("page1")]),e._v(" 和 "),a("code",[e._v("page2")]),e._v("用于分别放置不同页面，且默认均包含三个文档: "),a("code",[e._v("App.vue")]),e._v(", "),a("code",[e._v("index.html")]),e._v(", "),a("code",[e._v("index.js")]),e._v(", 这样在多人协作时，可以更为清晰地明确每个文件的含义。除此之外，此文件也可配置路由。")]),e._v(" "),a("h3",{attrs:{id:"_4-utils-增加下述代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-utils-增加下述代码","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. "),a("code",[e._v("utils")]),e._v(" 增加下述代码:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const glob = require('glob')\nconst PAGE_PATH = path.resolve(__dirname, '../src/pages')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n")])])]),a("p",[e._v("其中："),a("code",[e._v("PAGE_PATH")]),e._v(" 为所有页面所在的文件夹路径，指向 "),a("code",[e._v("pages")]),e._v("文件夹。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("exports.entries = function () {\n    /*用于匹配 pages 下一级文件夹中的 index.js 文件 */\n    var entryFiles = glob.sync(PAGE_PATH + '/*/index.js')\n    var map = {}\n    entryFiles.forEach((filePath) => {\n        /* 下述两句代码用于取出 pages 下一级文件夹的名称 */\n        var entryPath = path.dirname(filePath)\n        var filename = entryPath.substring(entryPath.lastIndexOf('\\/') + 1)\n        /* 生成对应的键值对 */\n        map[filename] = filePath\n    })\n    return map\n}\n")])])]),a("p",[e._v("该方法用于生成多页面的入口对象，例如本例，获得的入口对象如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{ \n    page1: '/Users/work/learn/vue/vue_multiple_test/src/pages/page1/index.js',\n    page2: '/Users/work/learn/vue/vue_multiple_test/src/pages/page2/index.js',\n }\n")])])]),a("p",[e._v("其中："),a("code",[e._v("key")]),e._v(" 为当前页面的文件夹名称，\n"),a("code",[e._v("value")]),e._v(" 为当前页面的入口文件名称")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("exports.htmlPlugin = function () {\n    let entryHtml = glob.sync(PAGE_PATH + '/*/index.html')\n    let arr = []\n    entryHtml.forEach((filePath) => {\n        var entryPath = path.dirname(filePath)\n        var filename = entryPath.substring(entryPath.lastIndexOf('\\/') + 1)\n        let conf = {\n            template: filePath,\n            filename: filename + `/index.html`,\n            chunks: ['manifest', 'vendor', filename],\n            inject: true\n        }\n        if (process.env.NODE_ENV === 'production') {\n            let productionConfig = {\n                minify: {\n                  removeComments: true,         // 移除注释\n                  collapseWhitespace: true,     // 删除空白符和换行符\n                  removeAttributeQuotes: true   // 移除属性引号 \n                },\n                chunksSortMode: 'dependency'    // 对引入的chunk模块进行排序\n            }\n            conf = {...conf, ...productionConfig} //合并基础配置和生产环境专属配置\n        }\n        arr.push(new HtmlWebpackPlugin(conf))\n    })\n    return arr\n}\n")])])]),a("h3",{attrs:{id:"_4-webpack-base-conf-js修改入口如下："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-webpack-base-conf-js修改入口如下：","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. "),a("code",[e._v("webpack.base.conf.js")]),e._v("修改入口如下：")]),e._v(" "),a("pre",[a("code",[e._v("entry: utils.entries()\n")])]),e._v(" "),a("h3",{attrs:{id:"_5-webpack-dev-conf-js-删除下述代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-webpack-dev-conf-js-删除下述代码","aria-hidden":"true"}},[e._v("#")]),e._v(" 5. "),a("code",[e._v("webpack.dev.conf.js")]),e._v(" 删除下述代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new HtmlWebpackPlugin({\n    filename: 'index.html',\n    template: 'index.html',\n    inject: true\n})\n")])])]),a("h3",{attrs:{id:"_6-webpack-prod-conf-js-删除下述代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-webpack-prod-conf-js-删除下述代码","aria-hidden":"true"}},[e._v("#")]),e._v(" 6. "),a("code",[e._v("webpack.prod.conf.js")]),e._v(" 删除下述代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new HtmlWebpackPlugin({\n    filename: config.build.index,\n    template: 'index.html',\n    inject: true,\n    minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n    },\n    chunksSortMode: 'dependency'\n})\n")])])]),a("h3",{attrs:{id:"_7-构建结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-构建结果","aria-hidden":"true"}},[e._v("#")]),e._v(" 7. 构建结果")]),e._v(" "),a("pre",[a("code",[e._v("【dev】开发环境下，执行 npm run dev 访问:\n\n http://localhost:8080/page1/index.html\n http://localhost:8080/page2/index.html\n\n 即为访问不同的页面\n\n\n【production】生产环境下，执行 npm run build, 生成的文件目录如下所示:\n\n│   ├── dist\n│   ├── page1\n│   │   └── index.html\n│   ├── page2\n│   │   └── index.html\n│   └── static\n│       ├── css\n│       │   ├── page1.86a4513a3e04c0dcb73e6d6aea4580e4.css\n│       │   ├── page1.86a4513a3e04c0dcb73e6d6aea4580e4.css.map\n│       │   ├── page2.86a4513a3e04c0dcb73e6d6aea4580e4.css\n│       │   └── page2.86a4513a3e04c0dcb73e6d6aea4580e4.css.map\n│       └── js\n│           ├── manifest.0c1cd46d93b12dcd0191.js\n│           ├── manifest.0c1cd46d93b12dcd0191.js.map\n│           ├── page1.e2997955f3b0f2090b7a.js\n│           ├── page1.e2997955f3b0f2090b7a.js.map\n│           ├── page2.4d41f3b684a56847f057.js\n│           ├── page2.4d41f3b684a56847f057.js.map\n│           ├── vendor.bb335a033c3b9e5d296a.js\n│           └── vendor.bb335a033c3b9e5d296a.js.map\n")])]),e._v(" "),a("h3",{attrs:{id:"_8-【懒人福利】使用shell脚本自动构建基础页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-【懒人福利】使用shell脚本自动构建基础页面","aria-hidden":"true"}},[e._v("#")]),e._v(" 8.【懒人福利】使用"),a("code",[e._v("shell")]),e._v("脚本自动构建基础页面")]),e._v(" "),a("p",[e._v("在项目文件下新建"),a("code",[e._v("shell")]),e._v("脚本"),a("code",[e._v("generatePage.sh")]),e._v(", 并在脚本中写入下述代码：")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#!/bin/bash\n# 打开 pages 文件夹，并创建文件\ncd src/pages\nfor file in $(ls)\ndo\n  if [ $file == $1 ];then\n  \techo $1\' 文件已存在, 请使用其他名字\'\n  \texit\n  fi\ndone\nmkdir $1\ncd $1\n# 生成 index.html\necho "" > index.html\necho \'<!DOCTYPE html>\n  <html>\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <title></title>\n  </head>\n  <body>\n    <div id="app"></div>\n    \x3c!-- built files will be auto injected --\x3e\n  </body>\n</html>\' > index.html\n\n# 生成 App.vue\necho "" > App.vue\necho \'<template>\n  <div id="app">\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "App"\n}\n<\/script>\n\n<style>\n#app {}\n</style>\' > App.vue\n\n# 生成 index.js\necho "" > index.js\necho "import Vue from \'vue\'\nimport App from \'./App\'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: \'#app\',\n  components: { App },\n  template: \'<App/>\'\n})" > index.js\n\n\n\n')])])]),a("p",[e._v("之后在项目路径下输入下述命令:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash generatePage.sh page4\n")])])]),a("p",[e._v("即可在"),a("code",[e._v("pages")]),e._v("文件夹下生成一个名为"),a("code",[e._v("page4")]),e._v("的新页面。还可以通过自定义"),a("code",[e._v("shell")]),e._v("脚本的内容写入路由等，以实现定制需求。")])])}],!1,null,null,null);s.options.__file="vuemultiple.md";n.default=s.exports}}]);